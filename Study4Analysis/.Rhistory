group_by(Group) %>%
summarise(n = n()/40,
NClips = n()/30,
mean = mean(sumWHN),
sd = sd(sumWHN),
meanRT = mean(meanRT),
sdRT = sd(meanRT))
SummaryPptWHNFullNov <-FullDatasetNov %>%
group_by(ProlificID) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
meanRT = mean(trialrespkey.rt, na.rm = T),
Group = GlasgowExp)
NovGroupSummary <- SummaryPptWHNFullNov %>%
group_by(Group) %>%
summarise(n = n()/40,
NClips = n()/30,
mean = mean(sumWHN),
sd = sd(sumWHN),
meanRT = mean(meanRT),
sdRT = sd(meanRT))
SummaryDBQ <- FullDataset %>%
group_by(Group) %>%
summarise(n = n(),
meanError = mean(Errors),
meanLapses = mean(Lapses),
meanViolation = mean(Violations))
summary(aov(data = SortedWHNData, trialrespkey.corr ~ Group))
Scoreanova <- aov(data = FullDataset, formula = trialrespkey.corr ~ Group * GlasgowExp)
summary(Scoreanova)
TukeyHSD(Scoreanova)
ScoreGLM0 <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ 1)
summary(ScoreGLM0)
ScoreGLMbase <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group)
summary(ScoreGLMbase)
# ScoreGLM1 <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group * GlasgowExp)
# summary(ScoreGLM1)
#
# ScoreGLM2 <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group * Gender)
# summary(ScoreGLM2)
#
# ScoreGLM3 <-glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group * GlasgowExp * Gender)
# summary(ScoreGLM3)
#coef(ScoreGLM1)
library(emmeans)
em <- emmeans(ScoreGLMbase, ~ Group , trans = "response")
contrast(em, "pairwise", adjust = "Tukey")
anova(ScoreGLM0, ScoreGLMbase, ScoreGLM1,ScoreGLM2,test = "LRT")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(splitstackshape)
library(stringr)
library(data.table)
library(dplyr)
library(tidyr)
library(gridExtra)
library(lme4)
library(lmerTest)
library(afex)
library(effects)
library(ggplot2)
library(ggthemes)
library(report)
library(janitor)
dataFolder = "C:/Users/thoma/OneDrive - University of Glasgow/Desktop/Study 4/WHNValidation/WHNdata/Exp"
file_list <- list.files(path = dataFolder, pattern = "..csv$", all.files = TRUE, full.names = TRUE, recursive = TRUE)
RawWHNDataset <- data.frame()
#loop through all the fills, create a temporary container, remove the first, second and last rows and then add 1 to the trials counter. Then bind it to the dataset
for (file in file_list){
tempData <- read.csv(file, header = T)
RawWHNDataset <- bind_rows(RawWHNDataset, tempData)
}
SortedWHNDataExp <- subset(RawWHNDataset,end_resp.keys != "space" ) %>%
select(ProlificID, trialrespkey.corr, video_file, trialrespkey.rt)
SortedWHNDataExp$video_file <- str_sub(SortedWHNDataExp$video_file, end = -8)
#removed for less than chance performance
SortedWHNDataExp <- subset(SortedWHNDataExp, ProlificID != '632aa1271f930bbc655a32d8')
SortedWHNDataExp <- subset(SortedWHNDataExp, ProlificID != '63ea4564de250efaacb1cceb')
NoPptsExp <- n_distinct(SortedWHNDataExp$ProlificID)
SortedWHNDataExp$Group <- "Experienced"
ExpIDs <- SortedWHNDataExp[!duplicated(SortedWHNDataExp$ProlificID), ]
write.csv2(SortedWHNDataExp, "ValidationExpWHN.csv")
write.csv(SortedWHNDataExp, "C:/Users/thoma/OneDrive - University of Glasgow/Desktop/Study 4/data/ValidationExpWHN.csv", row.names=FALSE)
dataFolderNov = "C:/Users/thoma/OneDrive - University of Glasgow/Desktop/Study 4/WHNValidation/WHNdata/Novice"
file_listNov <- list.files(path = dataFolderNov, pattern = "..csv$", all.files = TRUE, full.names = TRUE, recursive = TRUE)
RawWHNDatasetNov <- data.frame()
#loop through all the fills, create a temporary container, remove the first, second and last rows and then add 1 to the trials counter. Then bind it to the dataset
for (fileNov in file_listNov){
tempDataNov <- read.csv(fileNov, header = T)
RawWHNDatasetNov <- bind_rows(RawWHNDatasetNov, tempDataNov)
}
SortedWHNDataNov <- subset(RawWHNDatasetNov,end_resp.keys != "space" ) %>%
select(ProlificID, trialrespkey.corr, video_file, trialrespkey.rt)
SortedWHNDataNov$video_file <- str_sub(SortedWHNDataNov$video_file, end = -8)
#removed for less than chance performance
NoPptsNov <- n_distinct(SortedWHNDataNov$ProlificID)
SortedWHNDataNov$Group <- "Novice"
NoviceIDs <- SortedWHNDataNov[!duplicated(SortedWHNDataNov$ProlificID), ]
SortedWHNData <- rbind(SortedWHNDataExp, SortedWHNDataNov)
NoPpts <- n_distinct(SortedWHNData$ProlificID)
SortedWHNData$trialrespkey.rt <-stringr::str_remove_all(SortedWHNData$trialrespkey.rt,"[\\[\\]]")
SortedWHNData$trialrespkey.rt <- as.numeric(SortedWHNData$trialrespkey.rt)
SortedWHNData$ProlificID[SortedWHNData$ProlificID == "6050acf587bc4d19589f8002@email.prolific.com"] <- "6050acf587bc4d19589f8002"
SortedWHNData <- subset(SortedWHNData, ProlificID != '6050acf587bc4d19589f8002')
#write.csv(FullDataset, "ValidationWHNFull.csv")
IDs <- SortedWHNData %>%
group_by(ProlificID) %>%
select(ProlificID)
IDs <- IDs[!duplicated(IDs$ProlificID), ]
n_distinct(IDs$ProlificID)
IDs$Valid = TRUE
SummaryClipWHN <- SortedWHNData %>%
group_by(video_file, Group) %>%
summarise(n = n() ,
WHN = sum(trialrespkey.corr) ,
WHNPercent =   sum(trialrespkey.corr) / NoPpts*2)
ggplot(data = SummaryClipWHN, aes(x = video_file, y = WHN, fill = Group))+
geom_col()+
theme(axis.text.x = element_text(angle = 90))
HardClips <- subset(SummaryClipWHN, WHNPercent <= 0.5)
EasyClips <- subset(SummaryClipWHN, WHNPercent > 0.9)
SummaryPptWHN <-SortedWHNData %>%
group_by(ProlificID) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
meanRT = mean(trialrespkey.rt, na.rm = T),
Group = Group)
SummaryPptWHN <- rowid_to_column(SummaryPptWHN , "ID")
SummaryPptWHN$ID <- as.character(SummaryPptWHN$ID)
SummaryPptWHN <- SummaryPptWHN[!duplicated(SummaryPptWHN$ProlificID), ]
GroupSummary <- SummaryPptWHN %>%
group_by(Group) %>%
summarise(n = n(),
mean = mean(sumWHN),
sd = sd(sumWHN),
meanRT = mean(meanRT),
sdRT = sd(meanRT))
#ggplot(data = SummaryPptWHN, aes(x = ID, y = sumWHN, fill = ID))+
# geom_col()+
#theme(axis.text.x = element_text(angle = 90))
SummaryGroupWHN <-SortedWHNData %>%
group_by(Group) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr))
ggplot(data = SummaryGroupWHN, aes(x = Group, y = sumWHN/30, fill = Group))+
geom_col()+
ylim(0,40)+
geom_hline(yintercept = 40)+
scale_fill_brewer(palette = "Set1")
ggplot(data = SummaryPptWHN, aes(x = Group, y = sumWHN, fill = Group))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.2)+
ylim (0,40)+
labs(y = "Average number of Correct responses")+
scale_fill_brewer(palette = "Set1")+
theme_classic()
# SummarySexPptWHN <-FullDataset %>%
#   group_by(ProlificID) %>%
#   summarise(n = n(),
#             sumWHN = sum(trialrespkey.corr),
#             meanRT = mean(trialrespkey.rt, na.rm = T),
#             Group = Group,
#             Sex = Gender)
# ggplot(data = SummarySexPptWHN, aes(x = Group, y = sumWHN, fill = Sex))+
#   geom_violin(alpha = 0.4)+
#   geom_boxplot(width = 0.25,position = position_dodge(0.9))+
#   ylim (0,40)+
#   labs(y = "Average number of Correct responses")+
#   theme_classic()
DemogsRaw <- read.csv("C:/Users/thoma/OneDrive - University of Glasgow/Desktop/Study 4/WHNValidation/Qualtrics/QualtricsWHNValid.csv")%>%
select(starts_with('Q'), GroupCheck)
DemogDataOrg <- row_to_names(DemogsRaw, row_number = 1) %>%
rename(Age = `What is your age?`) %>%
rename(Gender = `What is your sex?`) %>%
rename(UKLicense = `Do you have a UK driving license?`) %>%
rename(YearsExp = `How many years driving experience do you have, either from when you passed your driving test or when you started driving regularly? (years / months)`) %>%
rename(GlasgowExp = `Do you have any experience driving around Glasgow?`) %>%
rename(GlasgowYearsExp = `How many years driving experience do you have driving around the West End of Glasgow? (years, months)`)
DemogsValid <-  left_join(DemogDataOrg, IDs, by = "ProlificID")
#DemogsValid <- DemogsValid[!is.na(DemogsValid$Valid)]
DemogsValid <- subset(DemogsValid, DemogsValid$Valid == TRUE)
DemogsDBQ <- DemogsValid
DBQItems <- cols <- names(DemogsDBQ)[7:31]
DemogsDBQ[DBQItems] <- lapply(DemogsDBQ[DBQItems], as.numeric)
DemogsDBQ$Errors <- 0
DemogsDBQ$Lapses <- 0
DemogsDBQ$Violations <- 0
Errors <- DemogsDBQ %>%
select('ProlificID', starts_with('E'))
Errors$meanErrors = rowMeans(Errors[2:9], na.rm = T)
Errors <- Errors %>%
select('ProlificID', 'meanErrors')
Violations <- DemogsDBQ %>%
select('ProlificID', starts_with('V'))
Violations$meanViolations = rowMeans(Violations[2:8])
Violations <- Violations %>%
select('ProlificID', 'meanViolations')
Lapses <- DemogsDBQ %>%
select('ProlificID', starts_with('L'))
Lapses$meanLapses = rowMeans(Lapses[2:9])
Lapses <- Lapses %>%
select('ProlificID', 'meanLapses')
DemogsDBQFull <- DemogsDBQ
DemogsDBQFull$Errors <- Errors$meanErrors
DemogsDBQFull$Lapses <- Lapses$meanLapses
DemogsDBQFull$Violations <- Violations$meanViolations
ggplot(data = DemogsDBQFull, aes(x = GroupCheck, y = Violations, fill = GroupCheck))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15)+
labs(y = "Average number of Violations")+
ylim(0,3)+
scale_fill_brewer(palette = "Set1")
ggplot(data = DemogsDBQFull, aes(x = GroupCheck, y = Lapses, fill = GroupCheck))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15)+
ylim(0,3)+
labs(y = "Average number of Lapses")+
scale_fill_brewer(palette = "Set1")
ggplot(data = DemogsDBQFull, aes(x = GroupCheck, y = Errors, fill = GroupCheck))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15)+
ylim(0,3)+
labs(y = "Average number of Errors")+
scale_fill_brewer(palette = "Set1")
ggplot(data = DemogsDBQFull, aes(x = Gender, y = Violations, fill = Gender))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15)+
labs(y = "Average number of Violations")
ggplot(data = DemogsDBQFull, aes(x = Gender, y = Lapses, fill = Gender))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15)+
labs(y = "Average number of Lapses")
ggplot(data = DemogsDBQFull, aes(x = Gender, y = Errors, fill = Gender))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15)+
labs(y = "Average number of Errors")
ggplot(data = DemogsDBQFull, aes(x = Gender, y = Violations, fill = GroupCheck))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.1, position=position_dodge(0.9))+
labs(y = "Average number of Violations")+
scale_fill_brewer(palette = "Set1")+
theme_classic()
ggplot(data = DemogsDBQFull, aes(x = Gender, y = Lapses, fill = GroupCheck))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15,position = position_dodge(0.9))+
labs(y = "Average number of Lapses")+
scale_fill_brewer(palette = "Set1")
ggplot(data = DemogsDBQFull, aes(x = Gender, y = Errors, fill = GroupCheck))+
geom_violin(alpha = 0.4)+
geom_boxplot(width = 0.15, position = position_dodge(0.9))+
labs(y = "Average number of Errors")+
scale_fill_brewer(palette = "Set1")
FullDataset <- left_join(SortedWHNData, DemogsDBQFull, by = 'ProlificID')
#FullDataset <- na.omit(FullDataset)
FullDataset$Age <- as.numeric(FullDataset$Age)
FullDataset$YearsExp <- as.numeric(FullDataset$YearsExp)
FullDataset$GlasgowYearsExp <- as.numeric(FullDataset$GlasgowYearsExp)
FullDataset$Group <- as.factor(FullDataset$Group)
FullDataset$Gender <- as.factor(FullDataset$Gender)
#Remove ppts who performed worse than chance
n_distinct(FullDataset$ProlificID)
write.csv2(FullDataset, "FullDataset.csv")
write.csv(FullDataset, "C:/Users/thoma/OneDrive - University of Glasgow/Desktop/Study 4/data/FullDataset.csv", row.names=FALSE)
FullDatasetExp <- FullDataset %>%
subset(Group == "Experienced")
FullDatasetNov <- FullDataset %>%
subset(Group == "Novice")
PlotData2 <- FullDataset %>%
select(ProlificID, trialrespkey.corr,  Group, YearsExp) %>%
group_by(ProlificID, Group) %>%
summarise(ProlificID = ProlificID,
score = sum(trialrespkey.corr),
YearsExp = YearsExp,
Group = Group)
ggplot(data = PlotData2, aes(x = YearsExp, y = score, fill = Group, colour = Group))+
geom_point()+
ylim(0,40)+
scale_color_brewer(palette = "Set1")+
geom_smooth(method = lm)
SummaryDemogs <- FullDataset %>%
group_by(Group) %>%
summarise(n = n()/40 ,
meanAge = mean(Age),
males = sum(Gender == 'Male')/40,
females = sum(Gender == 'Female')/40,
nonbinary = sum(Gender == "Non-Binary")/40,
meanExp = mean(YearsExp, na.rm = T),
sdExp = sd(YearsExp, na.rm = T),
numGlasgowERxp = sum(GlasgowExp == "Yes")/40,
meanGlasgowExp = mean(GlasgowYearsExp, na.rm = T))
SummaryPptWHNFull <-FullDataset %>%
group_by(ProlificID) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
meanRT = mean(trialrespkey.rt, na.rm = T),
Group = Group)
FullGroupSummary <- SummaryPptWHNFull %>%
group_by(Group) %>%
summarise(n = n()/40,
NClips = n()/30,
mean = mean(sumWHN),
sd = sd(sumWHN),
meanRT = mean(meanRT),
sdRT = sd(meanRT))
SummaryPptWHNFullExp <-FullDatasetExp %>%
group_by(ProlificID) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
meanRT = mean(trialrespkey.rt, na.rm = T),
Group = GlasgowExp)
ExpGroupSummary <- SummaryPptWHNFullExp %>%
group_by(Group) %>%
summarise(n = n()/40,
NClips = n()/30,
mean = mean(sumWHN),
sd = sd(sumWHN),
meanRT = mean(meanRT),
sdRT = sd(meanRT))
SummaryPptWHNFullNov <-FullDatasetNov %>%
group_by(ProlificID) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
meanRT = mean(trialrespkey.rt, na.rm = T),
Group = GlasgowExp)
NovGroupSummary <- SummaryPptWHNFullNov %>%
group_by(Group) %>%
summarise(n = n()/40,
NClips = n()/30,
mean = mean(sumWHN),
sd = sd(sumWHN),
meanRT = mean(meanRT),
sdRT = sd(meanRT))
SummaryDBQ <- FullDataset %>%
group_by(Group) %>%
summarise(n = n(),
meanError = mean(Errors),
meanLapses = mean(Lapses),
meanViolation = mean(Violations))
summary(aov(data = SortedWHNData, trialrespkey.corr ~ Group))
Scoreanova <- aov(data = FullDataset, formula = trialrespkey.corr ~ Group * GlasgowExp)
summary(Scoreanova)
TukeyHSD(Scoreanova)
ScoreGLM0 <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ 1)
summary(ScoreGLM0)
ScoreGLMbase <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group)
summary(ScoreGLMbase)
# ScoreGLM1 <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group * GlasgowExp)
# summary(ScoreGLM1)
#
# ScoreGLM2 <- glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group * Gender)
# summary(ScoreGLM2)
#
# ScoreGLM3 <-glm(family = binomial(link="logit"), data = FullDataset, formula = trialrespkey.corr ~ Group * GlasgowExp * Gender)
# summary(ScoreGLM3)
#coef(ScoreGLM1)
# library(emmeans)
# em <- emmeans(ScoreGLMbase, ~ Group , trans = "response")
# contrast(em, "pairwise", adjust = "Tukey")
#
# anova(ScoreGLM0, ScoreGLMbase, ScoreGLM1,ScoreGLM2,test = "LRT")
library(report)
results <- report(ScoreGLMbase)
print(results)
#Reaction Time
RTLM <- lm(family = poisson, data = FullDataset, formula = trialrespkey.rt ~ Group)
summary(RTLM)
FullDatasetTrim <- FullDataset %>%
subset(ProlificID != "60ee998ece5d505f67377c0b")
GenderGLM <- glm(family = binomial, data = FullDatasetTrim, formula = trialrespkey.corr ~  Gender)
summary(GenderGLM)
GenderGroupGLM <- glm(family = binomial, data = FullDatasetTrim, formula = trialrespkey.corr ~ Group * Gender)
summary(GenderGroupGLM)
em <- emmeans(GenderGroupGLM, ~ Group * Gender , trans = "response")
contrast(em, "pairwise", adjust = "Tukey")
DBQFullDataset <- FullDataset
DBQFullDataset <- DBQFullDataset[!duplicated(DBQFullDataset$ProlificID), ]
ErrorLM <- lm( data = DBQFullDataset, formula = Errors ~ Group)
summary(ErrorLM)
LapseLM <- lm( data = DBQFullDataset, formula = Lapses ~ Group)
summary(LapseLM)
ViolationLM <- lm( data = DBQFullDataset, formula = Violations ~ Group)
summary(ViolationLM)
ErrorSexLM <- lm(data = DBQFullDataset, formula = Errors ~ Group * Gender)
summary(ErrorSexLM)
LapseSexLM <- lm( data = DBQFullDataset, formula = Lapses ~ Group* Gender)
summary(LapseSexLM)
ViolationSexLM <- lm(data = DBQFullDataset, formula = Violations ~ Group * Gender)
summary(ViolationSexLM)
ScoreDBQGLM <- glm(data = FullDataset, formula = trialrespkey.corr ~ Group * Violations)
summary(ScoreDBQGLM)
View(SummaryGroupWHN)
View(GroupSummary)
SummaryGroupWHN <-SortedWHNData %>%
group_by(Group) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
propWHN = sum(trialrespkey.corr) / 40)
SummaryGroupWHN <-SortedWHNData %>%
group_by(Group) %>%
summarise(n = n(),
sumWHN = sum(trialrespkey.corr),
propWHN = sum(trialrespkey.corr) / n())
ExpProb = SummaryGroupWHN$propWHN[1]
NovProb = SummaryGroupWHN$propWHN[2]
dbinom(x = 0:1, size = 40, prob = ExpProb)
x <- 0:40
# size = 80, prob = 0.2
plot(dbinom(x, size = 80, prob = 0.2), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
# size = 80, prob = 0.3
lines(dbinom(x, size = 80, prob = 0.3), type = "h",
lwd = 2, col = rgb(1,0,0, 0.7))
# size = 80, prob = 0.4
lines(dbinom(x, size = 80, prob = 0.4), type = "h",
lwd = 2, col = rgb(0, 1, 0, 0.7))
# Add a legend
legend("topright", legend = c("80  0.2", "80  0.3", "80  0.4"),
title = "size  prob", title.adj = 0.95,
lty = 1, col = 1:3, lwd = 2, box.lty = 0)
# size = 80, prob = 0.3
lines(dbinom(x, size = 40, prob = ExpProb), type = "h",
lwd = 2, col = rgb(1,0,0, 0.7))
# size = 80, prob = 0.4
lines(dbinom(x, size = 40, prob = NovProb), type = "h",
lwd = 2, col = rgb(0, 1, 0, 0.7))
x <- 0:40
# size = 80, prob = 0.2
plot(dbinom(x, size = 80, prob = 0.2), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
# size = 80, prob = 0.3
lines(dbinom(x, size = 40, prob = ExpProb), type = "h",
lwd = 2, col = rgb(1,0,0, 0.7))
# size = 80, prob = 0.4
lines(dbinom(x, size = 40, prob = NovProb), type = "h",
lwd = 2, col = rgb(0, 1, 0, 0.7))
plot(dbinom(x, size = 40, prob = ExpProb), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
x <- 0:40
plot(dbinom(x, size = 40, prob = ExpProb), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
lines(dbinom(x, size = 40, prob = NovProb), type = "h",
lwd = 2, col = rgb(0, 1, 0, 0.7))
plot(dbinom(x, size = 40, prob = ExpProb), type = "h", lwd = 2,
col = rbg(1,0,0),
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
x <- 0:40
plot(dbinom(x, size = 40, prob = ExpProb), type = "h", lwd = 2,
col = rgb(1,0,0),
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
lines(dbinom(x, size = 40, prob = NovProb), type = "h",
lwd = 2, col = rgb(0, 1, 0, 0.7))
results <- rbinom(1000, size=40, prob=.ExpProb)
results <- rbinom(1000, size=40, prob=ExpProb)
ExpResults <- rbinom(1000, size=40, prob=ExpProb)
mean(ExpResults)
x <- 0:40
plot(dbinom(x, size = 40, prob = ExpProb), type = "h", lwd = 2,
col = rgb(1,0,0),
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
lines(dbinom(x, size = 40, prob = NovProb), type = "h",
lwd = 2, col = rgb(0, 1, 0, 0.7))
ExpResults <- rbinom(1000, size=40, prob=ExpProb)
mean(ExpResults)
NovResults <- rbinom(1000, size=40, prob=NovProb)
mean(NovResults)
ExpResults <- rbinom(100000, size=40, prob=ExpProb)
mean(ExpResults)
NovResults <- rbinom(100000, size=40, prob=NovProb)
mean(NovResults)
a <- .05
ExpProb + c(-qnorm(1-a/2), qnorm(1-a/2))*sqrt((1/100)*p*(1-p))
ExpProb + c(-qnorm(1-a/2), qnorm(1-a/2))*sqrt((1/100)*ExExpProbProb*(1-p))
a <- .05
ExpProb + c(-qnorm(1-a/2), qnorm(1-a/2))*sqrt((1/100)*ExpProb*(1-ExpProb))
a <- .05
ExpProb + c(-qnorm(1-a/2), qnorm(1-a/2))*sqrt((1/100)*ExpProb*(1-ExpProb))
NovProb + c(-qnorm(1-a/2), qnorm(1-a/2))*sqrt((1/100)*NovProb*(1-NovProb))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(splitstackshape)
library(stringr)
library(data.table)
library(dplyr)
library(tidyr)
library(gridExtra)
library(lme4)
library(lmerTest)
library(afex)
library(effects)
library(ggplot2)
library(ggthemes)
library(report)
library(janitor)
library(cowplot)
library(pwr)
dataFolder = "/WHNValidation/WHNdata/Exp"
file_list <- list.files(path = dataFolder, pattern = "..csv$", all.files = TRUE, full.names = TRUE, recursive = TRUE)
RawWHNDataset <- data.frame()
#loop through all the fills, create a temporary container, remove the first, second and last rows and then add 1 to the trials counter. Then bind it to the dataset
for (file in file_list){
tempData <- read.csv(file, header = T)
RawWHNDataset <- bind_rows(RawWHNDataset, tempData)
}
#Need to change location here:
dataFolder = "BRMHazPredAnalysis/WHNValidation/WHNdata/Exp"
