select(-c(4,5))
dataset[dataset== 'G'] <- 'Global'
dataset[dataset== 'L'] <- 'Local'
#Create a dataset with only the RT data for the target stimulus
datasetRT <- dataset %>%
# #   #Remove all NA values
drop_na(Block_resp.rt)
# Delete all rows where the stimulus isn't red ( Participants were not correct)
datasetRT <- datasetRT[!(datasetRT$Block_resp.corr == 0),]
#Summarise the RT data by Condition and Group
datasetMeanRT <- datasetRT %>%
group_by(Condition, Block) %>%
summarise(
n = n(),
avg = mean(Block_resp.rt, na.rm = T),
sd_total = sd(Block_resp.rt, na.rm = T)
)
ggplot(datasetRT, aes(reorder(Block, Block_resp.rt), Block_resp.rt,) ) +
geom_violin(aes(x = Block,  y = Block_resp.rt, colour = Condition, fill = Condition))
datasetMeanRT %>%
ggplot(aes(reorder(Block, avg), avg, ))+
geom_line(size = 0.3, aes(group = Condition, color = Condition)) +
geom_point (size = 4.5, aes(color = Condition), shape = 4) +
labs(x = "Block",
y = "Mean Reaction Time (s)",
tag = "",)+
ylim(0.4,0.7)+
theme_bw()
interaction.plot(x.factor =  datasetMeanRT$Block,
trace.factor = datasetMeanRT$Condition,
response = datasetMeanRT$avg,
fun = mean,
ylim = (c(0,0.7)),
xlab = "Timepoint",
ylab = "Disorientation subscale",
type= "b",
col=c("red","blue"),
pch=c(19,17,15),
trace.label = "Condition",
fixed=T,
leg.bty ="o")
RTAovInt = aov(Block_resp.rt ~ Condition * Block, data = datasetRT)
summary(RTAovInt)
TukeyPH <- TukeyHSD((RTAovInt))
TukeyPH
RTLM = lm(Block_resp.rt ~ Condition + Block + Condition:Block, data = datasetRT)
Anova(RTLM,
type = "II")
RTmarginal = emmeans(RTLM, ~Condition:Block)
pairs(RTmarginal, adjust="tukey")
datasetCorr <- dataset %>%
group_by(ID, Block) %>%
mutate(PercentCorrect = (sum(Block_resp.corr) / n() )* 100
)
datasetCorr <- datasetCorr %>%
group_by(ID, Block, Condition, PercentCorrect) %>%
summarise()
datasetCorrSumm <- dataset %>%
group_by(Condition, Block) %>%
summarise(
n =n(),
Correct = (sum(Block_resp.corr) / n() )* 100,
Incorrect = 100 -(sum(Block_resp.corr) / n() )* 100
)
CorrAovInt = aov(PercentCorrect ~ Condition * Block, data = datasetCorr)
summary(CorrAovInt)
#Tidy up the large datasat with the block, ID and Condition
dataset <- datasetRaw %>% select(1,15,19,30,31,34,39)
dataset<- dataset %>%
mutate(ID = substr(participant,
start = 1,
stop = 3)) %>%
mutate(Condition = substr(participant,
start = 4,
stop  = 5))
# Remove and reorganise columns
dataset <- dataset[,-7] %>%
select(c(ID, Condition, 1:6))
#Convert the two colums with block number into one label
dataset$Block1.thisRepN <- ifelse(grepl("[0-9]", dataset$Block1.thisRepN), "Cognitive Only", "")
dataset$Block2.thisRepN <- ifelse(grepl("[0-9]", dataset$Block2.thisRepN), "Dual Cognitive-AR", "")
dataset <-dataset %>%
mutate( Block =  paste(dataset$Block1.thisRepN,
dataset$Block2.thisRepN)) %>%
select(-c(4,5))
dataset[dataset== 'G'] <- 'Wider'
dataset[dataset== 'L'] <- 'Focused'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(stringr)
library(car)
library(ggpubr)
library(lme4)
library(emmeans)
### Read in the Data Files ###
#set the working directory to the data folder
setwd("D:/Python Scripts/")
#Define the filepath for where the data is coming from
dataFolder <- "D:/Python Scripts/RTData"
#Create a list of all the datafiles in the folder, and then convert to a list object - needs full names for the file path
file_list <- list.files(path = dataFolder, pattern = ".csv$", all.files = TRUE, full.names = TRUE, recursive = TRUE)
#Loop through the files and create one large dataset
datasetRaw <- data.frame()
for (i in 1:length(file_list)){
temp_data <- assign(paste(substr(file_list[i],26,29)),
read.csv(paste0(file_list[i])))
temp_data <- temp_data[-c(1:12,103),]
datasetRaw <- rbind(datasetRaw, temp_data)
}
#Change a data naming error
datasetRaw[datasetRaw == 'P04'] <- 'P04L'
#Tidy up the large datasat with the block, ID and Condition
dataset <- datasetRaw %>% select(1,15,19,30,31,34,39)
dataset<- dataset %>%
mutate(ID = substr(participant,
start = 1,
stop = 3)) %>%
mutate(Condition = substr(participant,
start = 4,
stop  = 5))
# Remove and reorganise columns
dataset <- dataset[,-7] %>%
select(c(ID, Condition, 1:6))
#Convert the two colums with block number into one label
dataset$Block1.thisRepN <- ifelse(grepl("[0-9]", dataset$Block1.thisRepN), "Cognitive Only", "")
dataset$Block2.thisRepN <- ifelse(grepl("[0-9]", dataset$Block2.thisRepN), "Dual Cognitive-AR", "")
dataset <-dataset %>%
mutate( Block =  paste(dataset$Block1.thisRepN,
dataset$Block2.thisRepN)) %>%
select(-c(4,5))
dataset[dataset== 'G'] <- 'Wider'
dataset[dataset== 'L'] <- 'Focused'
#Create a dataset with only the RT data for the target stimulus
datasetRT <- dataset %>%
# #   #Remove all NA values
drop_na(Block_resp.rt)
# Delete all rows where the stimulus isn't red ( Participants were not correct)
datasetRT <- datasetRT[!(datasetRT$Block_resp.corr == 0),]
#Summarise the RT data by Condition and Group
datasetMeanRT <- datasetRT %>%
group_by(Condition, Block) %>%
summarise(
n = n(),
avg = mean(Block_resp.rt, na.rm = T),
sd_total = sd(Block_resp.rt, na.rm = T)
)
ggplot(datasetRT, aes(reorder(Block, Block_resp.rt), Block_resp.rt,) ) +
geom_violin(aes(x = Block,  y = Block_resp.rt, colour = Condition, fill = Condition))
datasetMeanRT %>%
ggplot(aes(reorder(Block, avg), avg, ))+
geom_line(size = 0.3, aes(group = Condition, color = Condition)) +
geom_point (size = 4.5, aes(color = Condition), shape = 4) +
labs(x = "Block",
y = "Mean Reaction Time (s)",
tag = "",)+
ylim(0.4,0.7)+
theme_bw()
interaction.plot(x.factor =  datasetMeanRT$Block,
trace.factor = datasetMeanRT$Condition,
response = datasetMeanRT$avg,
fun = mean,
ylim = (c(0,0.7)),
xlab = "Timepoint",
ylab = "Disorientation subscale",
type= "b",
col=c("red","blue"),
pch=c(19,17,15),
trace.label = "Condition",
fixed=T,
leg.bty ="o")
RTAovInt = aov(Block_resp.rt ~ Condition * Block, data = datasetRT)
summary(RTAovInt)
TukeyPH <- TukeyHSD((RTAovInt))
TukeyPH
RTLM = lm(Block_resp.rt ~ Condition + Block + Condition:Block, data = datasetRT)
Anova(RTLM,
type = "II")
RTmarginal = emmeans(RTLM, ~Condition:Block)
pairs(RTmarginal, adjust="tukey")
datasetCorr <- dataset %>%
group_by(ID, Block) %>%
mutate(PercentCorrect = (sum(Block_resp.corr) / n() )* 100
)
datasetCorr <- datasetCorr %>%
group_by(ID, Block, Condition, PercentCorrect) %>%
summarise()
datasetCorrSumm <- dataset %>%
group_by(Condition, Block) %>%
summarise(
n =n(),
Correct = (sum(Block_resp.corr) / n() )* 100,
Incorrect = 100 -(sum(Block_resp.corr) / n() )* 100
)
CorrAovInt = aov(PercentCorrect ~ Condition * Block, data = datasetCorr)
summary(CorrAovInt)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(stringr)
library(car)
library(ggpubr)
library(lme4)
library(emmeans)
### Read in the Data Files ###
#set the working directory to the data folder
setwd("D:/Python Scripts/")
#Define the filepath for where the data is coming from
dataFolder <- "D:/Python Scripts/RTData"
#Create a list of all the datafiles in the folder, and then convert to a list object - needs full names for the file path
file_list <- list.files(path = dataFolder, pattern = ".csv$", all.files = TRUE, full.names = TRUE, recursive = TRUE)
#Loop through the files and create one large dataset
datasetRaw <- data.frame()
for (i in 1:length(file_list)){
temp_data <- assign(paste(substr(file_list[i],26,29)),
read.csv(paste0(file_list[i])))
temp_data <- temp_data[-c(1:12,103),]
datasetRaw <- rbind(datasetRaw, temp_data)
}
#Change a data naming error
datasetRaw[datasetRaw == 'P04'] <- 'P04L'
#Tidy up the large datasat with the block, ID and Condition
dataset <- datasetRaw %>% select(1,15,19,30,31,34,39)
dataset<- dataset %>%
mutate(ID = substr(participant,
start = 1,
stop = 3)) %>%
mutate(Condition = substr(participant,
start = 4,
stop  = 5))
# Remove and reorganise columns
dataset <- dataset[,-7] %>%
select(c(ID, Condition, 1:6))
#Convert the two colums with block number into one label
dataset$Block1.thisRepN <- ifelse(grepl("[0-9]", dataset$Block1.thisRepN), "Cognitive Only", "")
dataset$Block2.thisRepN <- ifelse(grepl("[0-9]", dataset$Block2.thisRepN), "Dual Cognitive-AR", "")
dataset <-dataset %>%
mutate( Block =  paste(dataset$Block1.thisRepN,
dataset$Block2.thisRepN)) %>%
select(-c(4,5))
dataset[dataset== 'G'] <- 'Wider'
dataset[dataset== 'L'] <- 'Focused'
#Create a dataset with only the RT data for the target stimulus
datasetRT <- dataset %>%
# #   #Remove all NA values
drop_na(Block_resp.rt)
# Delete all rows where the stimulus isn't red ( Participants were not correct)
datasetRT <- datasetRT[!(datasetRT$Block_resp.corr == 0),]
#Summarise the RT data by Condition and Group
datasetMeanRT <- datasetRT %>%
group_by(Condition, Block) %>%
summarise(
n = n(),
avg = mean(Block_resp.rt, na.rm = T),
sd_total = sd(Block_resp.rt, na.rm = T)
)
ggplot(datasetRT, aes(reorder(Block, Block_resp.rt), Block_resp.rt,) ) +
geom_violin(aes(x = Block,  y = Block_resp.rt, colour = Condition, fill = Condition))
datasetMeanRT %>%
ggplot(aes(reorder(Block, avg), avg, ))+
geom_line(size = 0.3, aes(group = Condition, color = Condition)) +
geom_point (size = 4.5, aes(color = Condition), shape = 4) +
labs(x = "Block",
y = "Mean Reaction Time (s)",
tag = "",)+
ylim(0.4,0.7)+
theme_bw()
interaction.plot(x.factor =  datasetMeanRT$Block,
trace.factor = datasetMeanRT$Condition,
response = datasetMeanRT$avg,
fun = mean,
ylim = (c(0,0.7)),
xlab = "Timepoint",
ylab = "Disorientation subscale",
type= "b",
col=c("red","blue"),
pch=c(19,17,15),
trace.label = "Condition",
fixed=T,
leg.bty ="o")
RTAovInt = aov(Block_resp.rt ~ Condition * Block, data = datasetRT)
summary(RTAovInt)
TukeyPH <- TukeyHSD((RTAovInt))
TukeyPH
RTLM = lm(Block_resp.rt ~ Condition + Block + Condition:Block, data = datasetRT)
Anova(RTLM,
type = "II")
RTmarginal = emmeans(RTLM, ~Condition:Block)
pairs(RTmarginal, adjust="tukey")
datasetCorr <- dataset %>%
group_by(ID, Block) %>%
mutate(PercentCorrect = (sum(Block_resp.corr) / n() )* 100
)
datasetCorr <- datasetCorr %>%
group_by(ID, Block, Condition, PercentCorrect) %>%
summarise()
datasetCorrSumm <- dataset %>%
group_by(Condition, Block) %>%
summarise(
n =n(),
Correct = (sum(Block_resp.corr) / n() )* 100,
Incorrect = 100 -(sum(Block_resp.corr) / n() )* 100
)
CorrAovInt = aov(PercentCorrect ~ Condition * Block, data = datasetCorr)
summary(CorrAovInt)
gc()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(janitor)
library(car)
library(emmeans)
setwd("D:/Qualtrics_Data/Study1/NASATLX")
#Read in the data
TLXdataRaw <- read.csv("TGExp1NasaTLX.csv") %>%
# Tidy the data - select scores,
select(starts_with('Q'))
TLXdataOrg <- TLXdataRaw[-c(1:2),]
colnames(TLXdataOrg) <- c('Ppt_ID','Block', 'Mental Demand', 'Physical Demand', 'Temporal Demand', 'Overall Performance', 'Effort', 'Frustration')
TLXdataOrg <- TLXdataOrg[-c(1:2),]
#Convert columns with ratings in to numeric
TLXdataOrg[3:8] = lapply(TLXdataOrg[3:8], FUN = function(y){as.numeric(y)})
#Remove Pilot data rows
TLXdataOrg <- TLXdataOrg[-c(1:9),]
#Change incorrect entries
TLXdataOrg[TLXdataOrg == 'P04'] <- 'P04L'
TLXdataOrg[TLXdataOrg == 'P118'] <- 'P11G'
TLXdataOrg[TLXdataOrg == '13g'] <- 'P13G'
TLXdataOrg[TLXdataOrg == 'G19p'] <- 'P19G'
TLXdataOrg[TLXdataOrg == '21g'] <- 'P21G'
#Reorganise the columns
#Split up the IDs and groups
TLXdataOrg<- TLXdataOrg %>%
mutate(ID = substr(Ppt_ID,
start = 1,
stop = 3)) %>%
mutate(Condition = substr(Ppt_ID,
start = 4,
stop  = 5))
#Rearrange the columns and remove extra ID column
TLXdataOrg <- TLXdataOrg[,-1] %>%
select(c(ID, Condition, 1:7))
#Change the conditions to upper case and remove whitespace
TLXdataOrg[,2] = toupper(TLXdataOrg[,2]) %>%
trimws(which = c("both"))
TLXdataOrg[TLXdataOrg == "G"] <- "Wider"
TLXdataOrg[TLXdataOrg == "L"] <- "Focused"
#Convert to wrangled dataset
TLXdata <- TLXdataOrg
TLXdataSumm <- TLXdata %>%
group_by(Block, Condition) %>%
summarise(
n = n(),
Mental_mean = mean(`Mental Demand`),
Mental_sd = sd(`Mental Demand`),
Physical_mean = mean(`Physical Demand`),
Physical_sd = sd(`Physical Demand`),
Temporal_mean = mean(`Temporal Demand`),
Temporal_sd = sd(`Temporal Demand`),
Performance_mean = mean(`Overall Performance`),
Performance_sd = sd(`Overall Performance`),
Frustration_mean = mean(Frustration),
Frustration_sd = sd(Frustration),
Effort_mean = mean(Effort),
Effort_sd = sd(Effort)
)
ggplot(TLXdata, aes(Condition, `Mental Demand`, fill = Block ))+
geom_violin(alpha = 0.5)+
ylim(0,100)+
labs(title = "Mental Demand")
ggplot(TLXdata, aes(Condition, `Physical Demand`, fill = Block ))+
geom_violin(alpha = 0.5)+
ylim(0,100)+
labs(title = "Physical Demand")
ggplot(TLXdata, aes(Condition, `Temporal Demand`, fill = Block ))+
geom_violin(alpha = 0.5)+
ylim(0,100)+
labs(title = "Temporal Demand")
ggplot(TLXdata, aes(Condition,`Overall Performance`, fill = Block ))+
geom_violin(alpha = 0.5)+
ylim (100,0)+
labs(title = "Overall Performance (Inverted)")
ggplot(TLXdata, aes(Condition, Effort, fill = Block ))+
geom_violin(alpha = 0.5)+
ylim (0,100)+
labs(title = "Effort")
ggplot(TLXdata, aes(Condition, Frustration, fill = Block ))+
geom_violin(alpha = 0.5)+
ylim (0,100)+
labs(title = "Frustration")
interaction.plot(x.factor = TLXdata$Block,
trace.factor = TLXdata$Condition,
response = TLXdata$`Mental Demand`,
fun = mean,
ylim = (c(0,100)),
xlab = "Block",
ylab = "Mental Demand TLX Score",
type = "b",
col = c("red", "blue"),
pch = c(19,17),
trace.label = " ",
fixed = T,
xpd = T,
leg.bty="o"
)
interaction.plot(x.factor = TLXdata$Block,
trace.factor = TLXdata$Condition,
response = TLXdata$`Physical Demand`,
fun = mean,
ylim = (c(0,100)),
xlab = "Block",
ylab = "Physical Demand TLX Score",
type = "b",
col = c("red", "blue"),
pch = c(19,17),
trace.label = " ",
fixed = T,
leg.bty="o"
)
interaction.plot(x.factor = TLXdata$Block,
trace.factor = TLXdata$Condition,
response = TLXdata$`Temporal Demand`,
fun = mean,
ylim = (c(0,100)),
xlab = "Block",
ylab = "Temporal Demand TLX Score",
type = "b",
col = c("red", "blue"),
pch = c(19,17),
trace.label = " ",
fixed = T,
leg.bty="o"
)
interaction.plot(x.factor = TLXdata$Block,
trace.factor = TLXdata$Condition,
response = TLXdata$`Overall Performance`,
fun = mean,
ylim = (c(0,100)),
xlab = "Block",
ylab = "Overall Performance TLX Score",
type = "b",
col = c("red", "blue"),
pch = c(19,17),
trace.label = " ",
fixed = T,
leg.bty="o"
)
interaction.plot(x.factor = TLXdata$Block,
trace.factor = TLXdata$Condition,
response = TLXdata$Effort,
fun = mean,
ylim = (c(0,100)),
xlab = "Block",
ylab = "Effort TLX Score",
type = "b",
col = c("red", "blue"),
pch = c(19,17),
trace.label = " ",
fixed = T,
leg.bty="o"
)
interaction.plot(x.factor = TLXdata$Block,
trace.factor = TLXdata$Condition,
response = TLXdata$Frustration,
fun = mean,
ylim = (c(0,100)),
xlab = "Block",
ylab = "Frustration TLX Score",
type = "b",
col = c("red", "blue"),
pch = c(19,17),
trace.label = " ",
fixed = T,
leg.bty="o"
)
MD_Aov = lm(`Mental Demand` ~ Block + Condition + Block:Condition, data = TLXdata)
print("Mental Demand")
Anova(MD_Aov,
type = "II")
print("Physical Demand")
PD_Aov = lm(`Physical Demand` ~ Block + Condition + Block:Condition, data = TLXdata)
Anova(PD_Aov,
type = "II")
TD_Aov = lm(`Temporal Demand` ~ Block + Condition + Block:Condition, data = TLXdata)
print("Temporal Demand")
Anova(TD_Aov,
type = "II")
OP_Aov = lm(`Overall Performance` ~ Block + Condition + Block:Condition, data = TLXdata)
print("Overall Performance")
Anova(OP_Aov,
type = "II")
EF_Aov = lm(Effort ~ Block + Condition + Block:Condition, data = TLXdata)
print("Effort")
Anova(EF_Aov,
type = "II")
FR_Aov = lm(Frustration ~ Block + Condition + Block:Condition, data = TLXdata)
print("Frustration")
Anova(FR_Aov,
type = "II")
MDmarginal = emmeans(MD_Aov, ~Block:Condition)
pairs(MDmarginal, adjust="tukey")
PDmarginal = emmeans(PD_Aov, ~Block:Condition)
pairs(PDmarginal, adjust="tukey")
TDmarginal = emmeans(TD_Aov, ~Block:Condition)
pairs(TDmarginal, adjust="tukey")
OPmarginal = emmeans(OP_Aov, ~Block:Condition)
pairs(OPmarginal, adjust="tukey")
EFmarginal = emmeans(EF_Aov, ~Block:Condition)
pairs(EFmarginal, adjust="tukey")
FRmarginal = emmeans(FR_Aov, ~Block:Condition)
pairs(FRmarginal, adjust="tukey")
View(TLXdata)
