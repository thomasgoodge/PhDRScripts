CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
CSQConversion$DisorientationWeight *
3.74)
#Calculate the CSQ score weightings according to Kennedy et al 1993
CSQConversion <- CSQdata
CSQConversion <- CSQConversion%>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
CSQConversion$DisorientationWeight *
3.74)
mutate(TotalCSQScore =
CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
CSQConversion$DisorientationWeight *
3.74)
#Calculate the CSQ score weightings according to Kennedy et al 1993
CSQConversion <- CSQdata
CSQConversion <- CSQConversion%>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
(CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
CSQConversion$DisorientationWeight *
3.74))
#Calculate the CSQ score weightings according to Kennedy et al 1993
CSQConversion <- CSQdata %>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
(CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
CSQConversion$DisorientationWeight *
3.74))
CSQdata <- CSQdataOrg %>%
rename(Timepoint = `Which timepoint is this?`)
CSQdata[CSQdata== '0 - None at all'] <- '0'
CSQdata[CSQdata== '1 - Mild'] <- '1'
CSQdata[CSQdata== '2 - Moderate'] <- '2'
CSQdata[CSQdata== '3 - Severe'] <- '3'
CSQdata[CSQdata== 'Pre-Experiment'] <- '1'
CSQdata[CSQdata== 'End of Control'] <- '2'
CSQdata[CSQdata== 'End of Experiment'] <- '3'
#Convert columns with ratings in to numeric
CSQdata[4:19] = lapply(CSQdata[4:19], FUN = function(y){as.numeric(y)})
#Calculate the CSQ score weightings according to Kennedy et al 1993
CSQConversion <- CSQdata %>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
(CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
CSQConversion$DisorientationWeight *
3.74))
View(CSQConversion)
CSQConversion <- CSQdata %>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92)
#Calculate the CSQ score weightings according to Kennedy et al 1993
CSQConversion <- CSQdata %>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
(CSQConversion$DisorientationWeight *
3.74))
#Summarise the descriptives for the converted scores
CSQConversionSummary <- CSQConversion %>%
group_by(Condition, Timepoint) %>%
summarise(
n = n(),
mean = mean(TotalCSQScore),
sd = sd(TotalCSQScore),
min = min(TotalCSQScore),
max = max(TotalCSQScore)
)
CSQNauseaSummary <- CSQConversion %>%
group_by(Condition, Timepoint) %>%
summarise(
n = n(),
mean = mean(NauseaWeight),
sd = sd(NauseaWeight),
min = min(NauseaWeight),
max = max(NauseaWeight)
)
knitr::opts_chunk$set(root.dir = 'D:/Qualtrics_Data/Study1/CSQ', echo = TRUE)
library(tidyverse)
library(readr)
library(janitor)
#Set the working directory of the data ***HARD CODED ***
setwd("D:/Qualtrics_Data/Study1/CSQ")
list.files()
#Read in the data
CSQdataRaw <- read.csv("D:/Qualtrics_Data/Study1/CSQ/EXP1CSQ.csv") %>%
select(starts_with('Q'))
#Format the column names by removing excess characters
CSQdataRaw[1,] <- sub(".*- ", "", CSQdataRaw[1,])
#change the row names to the column headers
CSQdataOrg <- row_to_names(CSQdataRaw, row_number = 1)
#remove pilot and test data  ***HARD-CODED***
CSQdataOrg <- CSQdataOrg[-c(1:17),]
#Change incorrect entries
CSQdataOrg[CSQdataOrg == 'Po3g'] <- 'P03G'
CSQdataOrg[CSQdataOrg == 'P04'] <- 'P04L'
CSQdataOrg[CSQdataOrg == 'P118'] <- 'P11G'
CSQdataOrg[CSQdataOrg == '13g'] <- 'P13G'
CSQdataOrg[CSQdataOrg == 'G19p'] <- 'P19G'
CSQdataOrg[CSQdataOrg == '21g'] <- 'P21G'
CSQdataOrg[CSQdataOrg == 'P9G'] <- 'P29G'
CSQdataOrg[CSQdataOrg == 'P29gG'] <- 'P29G'
#Reorganise the columns and separate out the Condition
CSQdataOrg<- CSQdataOrg %>%
mutate(ID = substr(`Participant ID:`,
start = 1,
stop = 3)) %>%
mutate(Condition = substr(`Participant ID:`,
start = 4,
stop  = 5))
#Rearrange the columns and remove extra ID column
CSQdataOrg <- CSQdataOrg[,-1] %>%
select(c(ID, Condition, 1:19))
#Change the conditions to upper case and remove whitespace
CSQdataOrg[,2] = toupper(CSQdataOrg[,2]) %>%
trimws(which = c("both"))
CSQdata <- CSQdataOrg %>%
rename(Timepoint = `Which timepoint is this?`)
CSQdata[CSQdata== '0 - None at all'] <- '0'
CSQdata[CSQdata== '1 - Mild'] <- '1'
CSQdata[CSQdata== '2 - Moderate'] <- '2'
CSQdata[CSQdata== '3 - Severe'] <- '3'
CSQdata[CSQdata== 'Pre-Experiment'] <- '1'
CSQdata[CSQdata== 'End of Control'] <- '2'
CSQdata[CSQdata== 'End of Experiment'] <- '3'
#Convert columns with ratings in to numeric
CSQdata[4:19] = lapply(CSQdata[4:19], FUN = function(y){as.numeric(y)})
#Calculate the CSQ score weightings according to Kennedy et al 1993
CSQConversion <- CSQdata %>%
mutate(NauseaWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$`Increased Salivation` +
CSQConversion$Sweating +
CSQConversion$Nausea +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Stomach Awareness` +
CSQConversion$Burping) *
9.54) %>%
mutate(OculomotorWeight =
(CSQConversion$`General Discomfort` +
CSQConversion$Fatigue +
CSQConversion$Headache +
CSQConversion$`Eye Strain` +
CSQConversion$`Difficulty Focusing` +
CSQConversion$`Difficulty Concentrating`+
CSQConversion$`Blurred Vision`) *
7.58) %>%
mutate(DisorientationWeight =
(CSQConversion$`Difficulty Focusing` +
CSQConversion$Nausea +
CSQConversion$`Fullness of Head` +
CSQConversion$`Blurred Vision` +
CSQConversion$`Dizzy (Eyes Open)` +
CSQConversion$`Dizzy ( Eyes Closed)`+
CSQConversion$Vertigo) *
13.92) %>%
mutate(TotalCSQScore =
CSQConversion$NauseaWeight +
CSQConversion$OculomotorWeight +
(CSQConversion$DisorientationWeight *
3.74))
#Summarise the descriptives for the converted scores
CSQConversionSummary <- CSQConversion %>%
group_by(Condition, Timepoint) %>%
summarise(
n = n(),
mean = mean(TotalCSQScore),
sd = sd(TotalCSQScore),
min = min(TotalCSQScore),
max = max(TotalCSQScore)
)
CSQNauseaSummary <- CSQConversion %>%
group_by(Condition, Timepoint) %>%
summarise(
n = n(),
mean = mean(NauseaWeight),
sd = sd(NauseaWeight),
min = min(NauseaWeight),
max = max(NauseaWeight)
)
CSQOculoSummary <- CSQConversion %>%
group_by(Condition, Timepoint) %>%
summarise(
n = n(),
mean = mean(OculomotorWeight),
sd = sd(OculomotorWeight),
min = min(OculomotorWeight),
max = max(OculomotorWeight)
)
CSQDisoriSummary <- CSQConversion %>%
group_by(Condition, Timepoint) %>%
summarise(
n = n(),
mean = mean(DisorientationWeight),
sd = sd(DisorientationWeight),
min = min(DisorientationWeight),
max = max(DisorientationWeight)
)
ggplot(CSQConversion, aes(x = TotalCSQScore, fill = Timepoint ))+
geom_histogram(binwidth = 10, position = "dodge")
ggplot(CSQConversion, aes(Condition, TotalCSQScore, fill = Timepoint ))+
geom_violin(alpha = 0.5)
CSQDataZScores <- CSQdata %>%
group_by(Condition, Timepoint)
#z_scores <- as.data.frame(sapply(df, function(df) (abs(df-mean(df))/sd(df))))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(janitor)
setwd("D:/Qualtrics_Data/Study1/NASATLX")
#Read in the data
TLXdataRaw <- read.csv("TGExp1NasaTLX.csv") %>%
# Tidy the data - select scores,
select(starts_with('Q'))
TLXdataOrg <- TLXdataRaw[-c(1:2),]
colnames(TLXdataOrg) <- c('Ppt_ID','Condition', 'Mental Demand', 'Physical Demand', 'Temporal Demand', 'Overall Performance', 'Effort', 'Frustration')
TLXdataOrg <- TLXdataOrg[-c(1:2),]
#Convert columns with ratings in to numeric
TLXdataOrg[3:8] = lapply(TLXdataOrg[3:8], FUN = function(y){as.numeric(y)})
#Remove Pilot data rows
TLXdataOrg <- TLXdataOrg[-c(1:9),]
#Change incorrect entries
TLXdataOrg[TLXdataOrg == 'P04'] <- 'P04L'
TLXdataOrg[TLXdataOrg == 'P118'] <- 'P11G'
TLXdataOrg[TLXdataOrg == '13g'] <- 'P13G'
TLXdataOrg[TLXdataOrg == 'G19p'] <- 'P19G'
TLXdataOrg[TLXdataOrg == '21g'] <- 'P21G'
#Reorganise the columns
#Split up the IDs and groups
TLXdataOrg<- TLXdataOrg %>%
mutate(ID = substr(Ppt_ID,
start = 1,
stop = 3)) %>%
mutate(Group = substr(Ppt_ID,
start = 4,
stop  = 5))
#Rearrange the columns and remove extra ID column
TLXdataOrg <- TLXdataOrg[,-1] %>%
select(c(ID, Group, 1:7))
#Change the conditions to upper case and remove whitespace
TLXdataOrg[,2] = toupper(TLXdataOrg[,2]) %>%
trimws(which = c("both"))
#Convert to wrangled dataset
TLXdata <- TLXdataOrg
# #Group the data and summarise the descriptives
# TLXWeighted <- TLXdata
#
# TLXWeighted$`Mental Demand` <- TLXWeighted$`Mental Demand` * 3
# TLXWeighted$`Physical Demand` <- TLXWeighted$`Physical Demand` * 0
# TLXWeighted$`Temporal Demand` <- TLXWeighted$`Temporal Demand` * 5
# TLXWeighted$`Overall Performance` <- TLXWeighted$`Overall Performance` * 1
# TLXWeighted$Frustration <- TLXWeighted$Frustration*3
# TLXWeighted$Effort <- TLXWeighted$Effort * 3
#
# TLXWeighted <- TLXWeighted %>%
#   mutate(Total =
#            TLXWeighted$`Mental Demand` +
#            TLXWeighted$`Physical Demand`+
#            TLXWeighted$`Temporal Demand`+
#            TLXWeighted$`Overall Performance` +
#            TLXWeighted$Frustration +
#            TLXWeighted$Effort
#            )
#
TLXdataSumm <- TLXdata %>%
group_by(Condition, Group) %>%
summarise(
n = n(),
Mental_mean = mean(`Mental Demand`),
Physical_mean = mean(`Physical Demand`),
Temporal_mean = mean(`Temporal Demand`),
Performance_mean = mean(`Overall Performance`),
Frustration_mean = mean(Frustration),
Effort_mean = mean(Effort)
)
View(TLXdataSumm)
knitr::opts_chunk$set(root.dir= normalizePath("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R"))
#set the working directory to the ARETT package
library(tidyverse)
library(readr)
#source all the ARETT functions from the R folder
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R/calculate_velocity.R")
knitr::opts_chunk$set(root.dir= normalizePath("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R"))
#set the working directory to the ARETT package
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R")
setwd(C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R)
library(tidyverse)
library(readr)
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R")
getwd()
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R")
setwd("C:\Users\thoma\OneDrive - University of Glasgow\Documents\R\ARETT-R-Package-master\R")
setwd("C:\Users\thoma\OneDrive - University of Glasgow\Documents\R\ARETT-R-Package-master\R")
"C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R"
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R")
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/")
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/")
knitr::opts_chunk$set(root.dir= normalizePath("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R"))
#set the working directory to the ARETT package
library(tidyverse)
library(readr)
setwd("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/")
#source all the ARETT functions from the R folder
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R/calculate_velocity.R")
#source all the ARETT functions from the R folder
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R/ARETT-R-Package-master/R_Scripts/calculate_velocity.R")
#source all the ARETT functions from the R folder
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/_Scripts/ARETT-R-Package-master/R/calculate_velocity.R")
#source all the ARETT functions from the R folder
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/calculate_velocity.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/classify_iaoi.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/classify_idt.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/classify_ivt.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/discard_short_fixations.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/gap_fill.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/merge_fixations_iaoi.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/merge_fixations_idt.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/merge_fixations_ivt.R")
source("C:/Users/thoma/OneDrive - University of Glasgow/Documents/R_Scripts/ARETT-R-Package-master/R/noise_reduction.R")
#read in the data
dataFolder = "D:/Hololens_ARETT_Data"
#Create a list of all the datafiles in the folder, and then convert to a list object - needs full names for the file path
file_list <- list.files(path = dataFolder, pattern = ".csv$", all.files = TRUE, full.names = TRUE, recursive = TRUE)
#Loop through the datafiles in file_list, assign them a name and then read them in
for(i in 1:length(file_list))
{
assign(paste(substr(file_list[i],24,27)), read.csv(paste0(file_list[i])))
}
